// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/operatoringress/v1"
	operatoringressv1 "github.com/openshift/client-go/operatoringress/applyconfigurations/operatoringress/v1"
	typedoperatoringressv1 "github.com/openshift/client-go/operatoringress/clientset/versioned/typed/operatoringress/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeDNSRecords implements DNSRecordInterface
type fakeDNSRecords struct {
	*gentype.FakeClientWithListAndApply[*v1.DNSRecord, *v1.DNSRecordList, *operatoringressv1.DNSRecordApplyConfiguration]
	Fake *FakeIngressV1
}

func newFakeDNSRecords(fake *FakeIngressV1, namespace string) typedoperatoringressv1.DNSRecordInterface {
	return &fakeDNSRecords{
		gentype.NewFakeClientWithListAndApply[*v1.DNSRecord, *v1.DNSRecordList, *operatoringressv1.DNSRecordApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("dnsrecords"),
			v1.SchemeGroupVersion.WithKind("DNSRecord"),
			func() *v1.DNSRecord { return &v1.DNSRecord{} },
			func() *v1.DNSRecordList { return &v1.DNSRecordList{} },
			func(dst, src *v1.DNSRecordList) { dst.ListMeta = src.ListMeta },
			func(list *v1.DNSRecordList) []*v1.DNSRecord { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.DNSRecordList, items []*v1.DNSRecord) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
